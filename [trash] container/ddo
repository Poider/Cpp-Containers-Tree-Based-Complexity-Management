iterator takes the root so it can get last element
swap the delete minmax thing before delete
make it so when it put left or right and make a new one to make it with the root comp etc so it compares it right etc I guess? prolly not cus in recursive it also just uses the root stuff as it calls recursivity, check tho where it goes like node-> smth (that would use the comp)

check if make pair should make const key or will it work if one of the types is const

code the thing where if its null in iterator itll go to the max or smth like that, for it-- from null

what happens if we go it = begin() then it-- then it-- will it go to max?
what happens also if we it++ from end? should I make it go to lowest if we it++ from null


make sure inserting from a hint doesnt screw up the height updating etc
or deleting right from a position instead of finding it

test if you delete smth that doesnt exist does it screw it?


update min max ptrs when erasing

code whats left thats commented in map

check do I really need to add value compare to Mapiterator

check for when you update _v_comp so that it uses the param constructor

make sure _v_comp(*(node->data),*(_min->data)) is how v_comp works

c9a9ab7 commit where avl struct changed

track if Im using const key value

will your map work with std? maybe remove ft pair typedef in it and let it take the namespace it wants

rebind?
instead of sending root, you can send min and max double ptrs

size-- on erase

enable if now

revise how it works? is it typed (typename std::enable_if<!std::is_integral< InputIt >::value,InputIt >::type* = nullptr)

remove cmp from iterator constructor

try to use avl tree alone

update min and max in erase now then try the mainn